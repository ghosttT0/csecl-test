"""
Django settings for CSECL project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-a-_330#wb0s$e-f!0zlr#!4t2s)(fxqgw0dv=5)az!4!zgq=c9"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'user',
    'interview',
    'class',
    'corsheaders',
    'rest_framework',  # DRF
    'adminpanel',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = "CSECL.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "CSECL.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# 临时用 SQLite 测试，避免数据库连接问题
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# 如果需要用 MySQL，取消注释下面的配置并注释上面的 SQLite 配置
# DATABASES = {
#     'default': {
#         # 可通过环境变量覆盖，便于云端部署（Zeabur等）
#         'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.mysql'),
#         'NAME': os.getenv('DB_NAME', 'zhaoxin-system'),
#         'HOST': os.getenv('DB_HOST', 'localhost'),
#         'PORT': os.getenv('DB_PORT', '3306'),
#         'USER': os.getenv('DB_USER', 'root'),
#         'PASSWORD': os.getenv('DB_PASSWORD', '1234567zhl'),
#         'ATOMIC_REQUESTS': True,
#         #'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
#         #'NAME': 'zhaoxin-system',  # 数据库名称
#         #'HOST': 'localhost',  # 数据库地址，本机 ip 地址 localhost或者写127.0.0.1
#         #'PORT': 3306,  # 端口
#         #'USER': 'root',  # 数据库用户名
#         #'PASSWORD': '1234567zhl',  # 数据库密码
#         # 'PASSWORD':'123456',
#         #'ATOMIC_REQUESTS': True,  # 启用自动事务
#     }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 把错误提示改为中文

# 改为中国时间
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = False  # 改为False是因为如果USE_TZ = True那么就算更改了TIME_ZONE，django也会把时区改为默认的时区


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# 在 setting.py 末尾添加以下设置
CORS_ALLOW_CREDENTIALS = True  # 指明在跨域访问中，后端是否支持对cookie的操作
CORS_ORIGIN_ALLOW_ALL = True  # 允许所有主机请求你的API
CORS_ALLOW_ALL_ORIGINS = True
# 允许所有请求头
CORS_ALLOW_HEADERS = '*'
# 允许所有方法
CORS_ALLOW_METHODS = "*"

LOGIN_REDIRECT_URL = '/index'

# cookie跨域问题解决
# 会话cookie上SameSite标志的值。此标志防止在跨站点请求中发送cookie，从而防止CSRF攻击，并使某些窃取会话cookie的方法不可能实现。
SESSION_COOKIE_SAMESITE = None  # response header set-cookie:samesite=lax  Default: 'Lax'
CSRF_COOKIE_SAMESITE = None
SESSION_COOKIE_HTTPONLY = False

# DRF全局配置
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # 分页设置
    'PAGE_SIZE': 2,  # 设置每页取2条数据
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',  # 设置接口中返回时间相关的字段（年月日，时分秒）
    # 自定义jwt认证
    # 'DEFAULT_AUTHENTICATION_CLASSES': ['Login.service.jwt.JWTQueryParamsAuthentication', ],
    # 异常返回格式控制
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',
}

# python manage.py runserver
# python manage.py makemigrations
# python manage.py migrate
